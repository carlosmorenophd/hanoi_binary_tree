{"ast":null,"code":"module.exports = function () {\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class TreeNode\n   * @classdesc Represents a node in the tree.\n   * @constructor\n   * @param {object} data - that is to be stored in a node\n   */\n  function TreeNode(data) {\n    /**\n     * Represents the parent node\n     *\n     * @property _parentNode\n     * @type {object}\n     * @default \"null\"\n     */\n    this._parentNode = null;\n\n    /**\n     * Represents the child nodes\n     *\n     * @property _childNodes\n     * @type {array}\n     * @default \"[]\"\n     */\n    this._childNodes = [];\n\n    /**\n     * Represents the data node has\n     *\n     * @property _data\n     * @type {object}\n     * @default \"null\"\n     */\n    this._data = data;\n\n    /**\n     * Depth of the node represents level in hierarchy\n     *\n     * @property _depth\n     * @type {number}\n     * @default -1\n     */\n    this._depth = -1;\n  }\n\n  // ------------------------------------\n  // Getters and Setters\n  // ------------------------------------\n\n  /**\n   * Returns a parent node of current node\n   *\n   * @method parentNode\n   * @memberof TreeNode\n   * @instance\n   * @return {TreeNode} - parent of current node\n   */\n  TreeNode.prototype.parentNode = function () {\n    return this._parentNode;\n  };\n\n  /**\n   * Returns an array of child nodes\n   *\n   * @method childNodes\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of child nodes\n   */\n  TreeNode.prototype.childNodes = function () {\n    return this._childNodes;\n  };\n\n  /**\n   * Sets or gets the data belonging to this node. Data is what user sets using `insert` and `insertTo` methods.\n   *\n   * @method data\n   * @memberof TreeNode\n   * @instance\n   * @param {object | array | string | number | null} data - data which is to be stored\n   * @return {object | array | string | number | null} - data belonging to this node\n   */\n  TreeNode.prototype.data = function (data) {\n    if (arguments.length > 0) {\n      this._data = data;\n    } else {\n      return this._data;\n    }\n  };\n\n  /**\n   * Depth of the node. Indicates the level at which node lies in a tree.\n   *\n   * @method depth\n   * @memberof TreeNode\n   * @instance\n   * @return {number} - depth of node\n   */\n  TreeNode.prototype.depth = function () {\n    return this._depth;\n  };\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Indicates whether this node matches the specified criteria. It triggers a callback criteria function that returns something.\n   *\n   * @method matchCriteria\n   * @memberof TreeNode\n   * @instance\n   * @param {function} callback - Callback function that specifies some criteria. It receives {@link TreeNode#_data} in parameter and expects different values in different scenarios.\n   * `matchCriteria` is used by following functions and expects:\n   * 1. {@link Tree#searchBFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 2. {@link Tree#searchDFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 3. {@link Tree#export} - {object} in return indicating formatted data object.\n   */\n  TreeNode.prototype.matchCriteria = function (criteria) {\n    return criteria(this._data);\n  };\n\n  /**\n   * get sibling nodes.\n   *\n   * @method siblings\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of instances of {@link TreeNode}\n   */\n  TreeNode.prototype.siblings = function () {\n    var thiss = this;\n    return !this._parentNode ? [] : this._parentNode._childNodes.filter(function (_child) {\n      return _child !== thiss;\n    });\n  };\n\n  /**\n   * Finds distance of node from root node\n   *\n   * @method distanceToRoot\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of instances of {@link TreeNode}\n   */\n  TreeNode.prototype.distanceToRoot = function () {\n    // Initialize Distance and Node\n    var distance = 0,\n      node = this;\n\n    // Loop Over Ancestors\n    while (node.parentNode()) {\n      distance++;\n      node = node.parentNode();\n    }\n\n    // Return\n    return distance;\n  };\n\n  /**\n   * Gets an array of all ancestor nodes including current node\n   *\n   * @method getAncestry\n   * @memberof TreeNode\n   * @instance\n   * @return {Array} - array of ancestor nodes\n   */\n  TreeNode.prototype.getAncestry = function () {\n    // Initialize empty array and node\n    var ancestors = [this],\n      node = this;\n\n    // Loop over ancestors and add them in array\n    while (node.parentNode()) {\n      ancestors.push(node.parentNode());\n      node = node.parentNode();\n    }\n\n    // Return\n    return ancestors;\n  };\n\n  /**\n   * Exports the node data in format specified. It maintains herirachy by adding\n   * additional \"children\" property to returned value of `criteria` callback.\n   *\n   * @method export\n   * @memberof TreeNode\n   * @instance\n   * @param {TreeNode~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be exported. A new property \"children\" is added to object returned\n   * that maintains the heirarchy of nodes.\n   * @return {object} - {@link TreeNode}.\n   * @example\n   *\n   * var rootNode = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * tree.insert({\n   *   key: '#greenapple',\n   *   value: { name: 'Green Apple', color: 'Green'}\n   * });\n   *\n   * tree.insertToNode(rootNode,  {\n   *  key: '#someanotherapple',\n   *  value: { name: 'Some Apple', color: 'Some Color' }\n   * });\n   *\n   * // Export the tree\n   * var exported = rootNode.export(function(data){\n   *  return { name: data.value.name };\n   * });\n   *\n   * // Result in `exported`\n   * {\n   * \"name\": \"Apple\",\n   * \"children\": [\n   *   {\n   *     \"name\": \"Green Apple\",\n   *     \"children\": []\n   *   },\n   *   {\n   *     \"name\": \"Some Apple\",\n   *     \"children\": []\n   *  }\n   * ]\n   *}\n   *\n   */\n  TreeNode.prototype.export = function (criteria) {\n    // Check if criteria is specified\n    if (!criteria || typeof criteria !== 'function') throw new Error('Export criteria not specified');\n\n    // Export every node recursively\n    var exportRecur = function (node) {\n      var exported = node.matchCriteria(criteria);\n      if (!exported || typeof exported !== 'object') {\n        throw new Error('Export criteria should always return an object and it cannot be null.');\n      } else {\n        exported.children = [];\n        node._childNodes.forEach(function (_child) {\n          exported.children.push(exportRecur(_child));\n        });\n        return exported;\n      }\n    };\n    return exportRecur(this);\n  };\n\n  // ------------------------------------\n  // Export\n  // ------------------------------------\n\n  return TreeNode;\n}();","map":{"version":3,"names":["module","exports","TreeNode","data","_parentNode","_childNodes","_data","_depth","prototype","parentNode","childNodes","arguments","length","depth","matchCriteria","criteria","siblings","thiss","filter","_child","distanceToRoot","distance","node","getAncestry","ancestors","push","export","Error","exportRecur","exported","children","forEach"],"sources":["/home/ubuntu/repo/architec_of_computer_1/hanoi-react/node_modules/data-tree/src/tree-node.js"],"sourcesContent":["\nmodule.exports = (function(){\n\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class TreeNode\n   * @classdesc Represents a node in the tree.\n   * @constructor\n   * @param {object} data - that is to be stored in a node\n   */\n  function TreeNode(data){\n\n    /**\n     * Represents the parent node\n     *\n     * @property _parentNode\n     * @type {object}\n     * @default \"null\"\n     */\n    this._parentNode = null;\n\n    /**\n     * Represents the child nodes\n     *\n     * @property _childNodes\n     * @type {array}\n     * @default \"[]\"\n     */\n    this._childNodes = [];\n\n    /**\n     * Represents the data node has\n     *\n     * @property _data\n     * @type {object}\n     * @default \"null\"\n     */\n    this._data = data;\n\n    /**\n     * Depth of the node represents level in hierarchy\n     *\n     * @property _depth\n     * @type {number}\n     * @default -1\n     */\n    this._depth = -1;\n\n  }\n\n  // ------------------------------------\n  // Getters and Setters\n  // ------------------------------------\n\n  /**\n   * Returns a parent node of current node\n   *\n   * @method parentNode\n   * @memberof TreeNode\n   * @instance\n   * @return {TreeNode} - parent of current node\n   */\n  TreeNode.prototype.parentNode = function(){\n    return this._parentNode;\n  };\n\n  /**\n   * Returns an array of child nodes\n   *\n   * @method childNodes\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of child nodes\n   */\n  TreeNode.prototype.childNodes = function(){\n    return this._childNodes;\n  };\n\n  /**\n   * Sets or gets the data belonging to this node. Data is what user sets using `insert` and `insertTo` methods.\n   *\n   * @method data\n   * @memberof TreeNode\n   * @instance\n   * @param {object | array | string | number | null} data - data which is to be stored\n   * @return {object | array | string | number | null} - data belonging to this node\n   */\n  TreeNode.prototype.data = function(data){\n    if(arguments.length > 0){\n      this._data = data;\n    } else {\n      return this._data;\n    }\n  };\n\n  /**\n   * Depth of the node. Indicates the level at which node lies in a tree.\n   *\n   * @method depth\n   * @memberof TreeNode\n   * @instance\n   * @return {number} - depth of node\n   */\n  TreeNode.prototype.depth = function(){\n    return this._depth;\n  };\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Indicates whether this node matches the specified criteria. It triggers a callback criteria function that returns something.\n   *\n   * @method matchCriteria\n   * @memberof TreeNode\n   * @instance\n   * @param {function} callback - Callback function that specifies some criteria. It receives {@link TreeNode#_data} in parameter and expects different values in different scenarios.\n   * `matchCriteria` is used by following functions and expects:\n   * 1. {@link Tree#searchBFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 2. {@link Tree#searchDFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 3. {@link Tree#export} - {object} in return indicating formatted data object.\n   */\n  TreeNode.prototype.matchCriteria = function(criteria){\n    return criteria(this._data);\n  };\n\n  /**\n   * get sibling nodes.\n   *\n   * @method siblings\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of instances of {@link TreeNode}\n   */\n  TreeNode.prototype.siblings = function(){\n    var thiss = this;\n    return !this._parentNode ? [] : this._parentNode._childNodes.filter(function(_child){\n      return _child !== thiss;\n    });\n  };\n\n  /**\n   * Finds distance of node from root node\n   *\n   * @method distanceToRoot\n   * @memberof TreeNode\n   * @instance\n   * @return {array} - array of instances of {@link TreeNode}\n   */\n  TreeNode.prototype.distanceToRoot = function(){\n\n    // Initialize Distance and Node\n    var distance = 0,\n        node = this;\n\n    // Loop Over Ancestors\n    while(node.parentNode()){\n      distance++;\n      node = node.parentNode();\n    }\n\n    // Return\n    return distance;\n\n  };\n\n  /**\n   * Gets an array of all ancestor nodes including current node\n   *\n   * @method getAncestry\n   * @memberof TreeNode\n   * @instance\n   * @return {Array} - array of ancestor nodes\n   */\n  TreeNode.prototype.getAncestry = function(){\n\n    // Initialize empty array and node\n    var ancestors = [this],\n        node = this;\n\n    // Loop over ancestors and add them in array\n    while(node.parentNode()){\n      ancestors.push(node.parentNode());\n      node = node.parentNode();\n    }\n\n    // Return\n    return ancestors;\n\n  };\n\n  /**\n   * Exports the node data in format specified. It maintains herirachy by adding\n   * additional \"children\" property to returned value of `criteria` callback.\n   *\n   * @method export\n   * @memberof TreeNode\n   * @instance\n   * @param {TreeNode~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be exported. A new property \"children\" is added to object returned\n   * that maintains the heirarchy of nodes.\n   * @return {object} - {@link TreeNode}.\n   * @example\n   *\n   * var rootNode = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * tree.insert({\n   *   key: '#greenapple',\n   *   value: { name: 'Green Apple', color: 'Green'}\n   * });\n   *\n   * tree.insertToNode(rootNode,  {\n   *  key: '#someanotherapple',\n   *  value: { name: 'Some Apple', color: 'Some Color' }\n   * });\n   *\n   * // Export the tree\n   * var exported = rootNode.export(function(data){\n   *  return { name: data.value.name };\n   * });\n   *\n   * // Result in `exported`\n   * {\n   * \"name\": \"Apple\",\n   * \"children\": [\n   *   {\n   *     \"name\": \"Green Apple\",\n   *     \"children\": []\n   *   },\n   *   {\n   *     \"name\": \"Some Apple\",\n   *     \"children\": []\n   *  }\n   * ]\n   *}\n   *\n   */\n  TreeNode.prototype.export = function(criteria){\n\n    // Check if criteria is specified\n    if(!criteria || typeof criteria !== 'function')\n      throw new Error('Export criteria not specified');\n\n    // Export every node recursively\n    var exportRecur = function(node){\n      var exported = node.matchCriteria(criteria);\n      if(!exported || typeof exported !== 'object'){\n        throw new Error('Export criteria should always return an object and it cannot be null.');\n      } else {\n        exported.children = [];\n        node._childNodes.forEach(function(_child){\n          exported.children.push(exportRecur(_child));\n        });\n\n        return exported;\n      }\n    };\n\n    return exportRecur(this);\n  };\n\n  // ------------------------------------\n  // Export\n  // ------------------------------------\n\n  return TreeNode;\n\n}());\n"],"mappings":"AACAA,MAAM,CAACC,OAAO,GAAI,YAAU;EAE1B;EACA,YAAY;;EAEZ;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASC,QAAQA,CAACC,IAAI,EAAC;IAErB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAG,IAAI;;IAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAG,EAAE;;IAErB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAGH,IAAI;;IAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;EAElB;;EAEA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,QAAQ,CAACM,SAAS,CAACC,UAAU,GAAG,YAAU;IACxC,OAAO,IAAI,CAACL,WAAW;EACzB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,QAAQ,CAACM,SAAS,CAACE,UAAU,GAAG,YAAU;IACxC,OAAO,IAAI,CAACL,WAAW;EACzB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEH,QAAQ,CAACM,SAAS,CAACL,IAAI,GAAG,UAASA,IAAI,EAAC;IACtC,IAAGQ,SAAS,CAACC,MAAM,GAAG,CAAC,EAAC;MACtB,IAAI,CAACN,KAAK,GAAGH,IAAI;IACnB,CAAC,MAAM;MACL,OAAO,IAAI,CAACG,KAAK;IACnB;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEJ,QAAQ,CAACM,SAAS,CAACK,KAAK,GAAG,YAAU;IACnC,OAAO,IAAI,CAACN,MAAM;EACpB,CAAC;;EAED;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,QAAQ,CAACM,SAAS,CAACM,aAAa,GAAG,UAASC,QAAQ,EAAC;IACnD,OAAOA,QAAQ,CAAC,IAAI,CAACT,KAAK,CAAC;EAC7B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEJ,QAAQ,CAACM,SAAS,CAACQ,QAAQ,GAAG,YAAU;IACtC,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAO,CAAC,IAAI,CAACb,WAAW,GAAG,EAAE,GAAG,IAAI,CAACA,WAAW,CAACC,WAAW,CAACa,MAAM,CAAC,UAASC,MAAM,EAAC;MAClF,OAAOA,MAAM,KAAKF,KAAK;IACzB,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEf,QAAQ,CAACM,SAAS,CAACY,cAAc,GAAG,YAAU;IAE5C;IACA,IAAIC,QAAQ,GAAG,CAAC;MACZC,IAAI,GAAG,IAAI;;IAEf;IACA,OAAMA,IAAI,CAACb,UAAU,EAAE,EAAC;MACtBY,QAAQ,EAAE;MACVC,IAAI,GAAGA,IAAI,CAACb,UAAU,EAAE;IAC1B;;IAEA;IACA,OAAOY,QAAQ;EAEjB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEnB,QAAQ,CAACM,SAAS,CAACe,WAAW,GAAG,YAAU;IAEzC;IACA,IAAIC,SAAS,GAAG,CAAC,IAAI,CAAC;MAClBF,IAAI,GAAG,IAAI;;IAEf;IACA,OAAMA,IAAI,CAACb,UAAU,EAAE,EAAC;MACtBe,SAAS,CAACC,IAAI,CAACH,IAAI,CAACb,UAAU,EAAE,CAAC;MACjCa,IAAI,GAAGA,IAAI,CAACb,UAAU,EAAE;IAC1B;;IAEA;IACA,OAAOe,SAAS;EAElB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEtB,QAAQ,CAACM,SAAS,CAACkB,MAAM,GAAG,UAASX,QAAQ,EAAC;IAE5C;IACA,IAAG,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAC5C,MAAM,IAAIY,KAAK,CAAC,+BAA+B,CAAC;;IAElD;IACA,IAAIC,WAAW,GAAG,SAAAA,CAASN,IAAI,EAAC;MAC9B,IAAIO,QAAQ,GAAGP,IAAI,CAACR,aAAa,CAACC,QAAQ,CAAC;MAC3C,IAAG,CAACc,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAC;QAC3C,MAAM,IAAIF,KAAK,CAAC,uEAAuE,CAAC;MAC1F,CAAC,MAAM;QACLE,QAAQ,CAACC,QAAQ,GAAG,EAAE;QACtBR,IAAI,CAACjB,WAAW,CAAC0B,OAAO,CAAC,UAASZ,MAAM,EAAC;UACvCU,QAAQ,CAACC,QAAQ,CAACL,IAAI,CAACG,WAAW,CAACT,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC;QAEF,OAAOU,QAAQ;MACjB;IACF,CAAC;IAED,OAAOD,WAAW,CAAC,IAAI,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;;EAEA,OAAO1B,QAAQ;AAEjB,CAAC,EAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}