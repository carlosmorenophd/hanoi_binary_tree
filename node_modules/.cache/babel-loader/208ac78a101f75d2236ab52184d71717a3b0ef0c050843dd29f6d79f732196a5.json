{"ast":null,"code":"import uuid from \"react-uuid\";\nimport dataTree from 'data-tree';\nconst usehanoi = () => {\n  let leafs = [];\n  let step = 0;\n  const addLeafNode = _ref => {\n    let {\n      id,\n      node,\n      tower,\n      parent\n    } = _ref;\n    if (parent === 0) {\n      leafs = [];\n    }\n    leafs.push({\n      id,\n      node,\n      tower,\n      parent,\n      action: {\n        step: -1,\n        message: ''\n      }\n    });\n  };\n  const addLeafPrint = _ref2 => {\n    let {\n      action,\n      id\n    } = _ref2;\n    console.log(action);\n    step++;\n    leafs = leafs.map(leaf => {\n      if (leaf.id === id) {\n        leaf.action.step = step;\n        leaf.action.message = action;\n      }\n      return leaf;\n    });\n  };\n  const hanoi = _ref3 => {\n    let {\n      n,\n      source,\n      destined,\n      auxiliary,\n      id,\n      parent\n    } = _ref3;\n    addLeafNode({\n      id,\n      node: n,\n      tower: `${source},${destined},${auxiliary}`,\n      parent\n    });\n    const action = `Move disc ${n} from [${source} => ${destined}]`;\n    if (n === 1) {\n      addLeafPrint({\n        id,\n        action\n      });\n    } else {\n      hanoi({\n        n: n - 1,\n        source: source,\n        destined: auxiliary,\n        auxiliary: destined,\n        id: uuid(),\n        parent: id\n      });\n      addLeafPrint({\n        id,\n        action\n      });\n      hanoi({\n        n: n - 1,\n        source: auxiliary,\n        destined: destined,\n        auxiliary: source,\n        id: uuid(),\n        parent: id\n      });\n    }\n  };\n  const getTree = _ref4 => {\n    let {\n      n\n    } = _ref4;\n    // console.log(leafs);\n    let tree = dataTree.create();\n    for (let i = n; i >= 1; i--) {\n      const nodes = leafs.filter(leaf => leaf.node === i);\n      // console.log(nodes);\n      if (nodes) {\n        nodes.forEach(node => {\n          if (node.parent === 0) {\n            tree.insert({\n              key: node.id,\n              values: {\n                hanoi: node.node,\n                tower: node.tower,\n                print: node.action.message,\n                printStep: node.action.step\n              }\n            });\n          } else {\n            tree.insertTo(data => data.key === node.parent, {\n              key: node.id,\n              values: {\n                hanoi: node.node,\n                tower: node.tower,\n                print: node.action.message,\n                printStep: node.action.step\n              }\n            });\n          }\n        });\n      }\n    }\n    const exported = tree.export(data => {\n      return {\n        name: `H(${data.values.hanoi})`,\n        attributes: {\n          towers: data.values.tower,\n          print: `#${data.values.printStep} - ${data.values.print}`\n        }\n      };\n    });\n    console.log(exported);\n    return exported;\n  };\n  return {\n    hanoi,\n    getTree\n  };\n};\nexport { usehanoi };","map":{"version":3,"names":["uuid","dataTree","usehanoi","leafs","step","addLeafNode","_ref","id","node","tower","parent","push","action","message","addLeafPrint","_ref2","console","log","map","leaf","hanoi","_ref3","n","source","destined","auxiliary","getTree","_ref4","tree","create","i","nodes","filter","forEach","insert","key","values","print","printStep","insertTo","data","exported","export","name","attributes","towers"],"sources":["/home/ubuntu/repo/architec_of_computer_1/hanoi-react/src/hanoi.code.js"],"sourcesContent":["import uuid from \"react-uuid\";\nimport dataTree from 'data-tree';\n\n\n\nconst usehanoi = () => {\n    let leafs = [];\n    let step = 0;\n\n    const addLeafNode = ({\n        id,\n        node,\n        tower,\n        parent, }) => {\n        if (parent === 0) {\n            leafs = []\n        }\n        leafs.push({\n            id,\n            node,\n            tower,\n            parent,\n            action: {\n                step: -1,\n                message: '',\n            },\n        });\n    }\n    const addLeafPrint = ({\n        action,\n        id,\n    }) =>{\n        console.log(action);\n        step++;\n        leafs =  leafs.map(leaf => {\n            if(leaf.id === id){\n                leaf.action.step = step;\n                leaf.action.message = action;\n            }\n            return leaf;\n        });\n\n    }\n\n    const hanoi = ({ n, source, destined, auxiliary, id, parent }) => {\n        addLeafNode({\n            id,\n            node: n,\n            tower: `${source},${destined},${auxiliary}`,\n            parent,\n        });\n        const action = `Move disc ${n} from [${source} => ${destined}]`;\n        if (n === 1) {\n            \n            addLeafPrint({\n                id,\n                action,\n            });\n        }\n        else {\n            hanoi({\n                n: n - 1,\n                source: source,\n                destined: auxiliary,\n                auxiliary: destined,\n                id: uuid(),\n                parent: id,\n            });\n            \n            addLeafPrint({\n                id,\n                action,\n            });\n            hanoi({\n                n: n - 1,\n                source: auxiliary,\n                destined: destined,\n                auxiliary: source,\n                id: uuid(),\n                parent: id,\n            });\n        }\n    }\n\n    const getTree = ({n}) => {\n        // console.log(leafs);\n        let tree = dataTree.create();\n        for(let i=n; i>=1; i--){\n            const nodes = leafs.filter(leaf => leaf.node === i);\n            // console.log(nodes);\n            if(nodes){\n                nodes.forEach(node => {\n                    if(node.parent === 0){\n                        tree.insert({\n                            key: node.id,\n                            values: {\n                                hanoi: node.node,\n                                tower: node.tower,\n                                print: node.action.message,\n                                printStep: node.action.step,\n                            }\n                        });\n                    }else{\n                        tree.insertTo((data) => data.key === node.parent,{\n                            key: node.id,\n                            values: {\n                                hanoi: node.node,\n                                tower: node.tower,\n                                print: node.action.message,\n                                printStep: node.action.step,\n                            }\n                        });\n                    }\n                });\n            }\n        }\n        const exported = tree.export((data) => {\n            return {\n                name: `H(${data.values.hanoi})`,\n                attributes:{\n                    towers: data.values.tower,\n                    print: `#${data.values.printStep} - ${data.values.print}`,\n                },\n            }\n        });\n        console.log(exported);\n        return exported;\n    }\n\n    return {\n        hanoi,\n        getTree,\n    }\n\n}\n\n\n\nexport { usehanoi }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}