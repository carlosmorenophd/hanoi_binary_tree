{"ast":null,"code":"var TreeNode = require('./tree-node');\nvar Traverser = require('./traverser');\nmodule.exports = function () {\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class Tree\n   * @classdesc Represents the tree in which data nodes can be inserted\n   * @constructor\n   */\n  function Tree() {\n    /**\n     * Represents the root node of the tree.\n     *\n     * @member\n     * @type {object}\n     * @default \"null\"\n     */\n    this._rootNode = null;\n\n    /**\n     * Represents the current node in question. `_currentNode` points to most recent\n     * node inserted or parent node of most recent node removed.\n     *\n     * @member\n    * @memberof Tree.\n     * @type {object}\n     * @default \"null\"\n     */\n    this._currentNode = null;\n\n    /**\n     * Represents the traverser which search/traverse a tree in DFS and BFS fashion.\n     *\n     * @member\n     * @memberof Tree\n     * @type {object}\n     * @instance\n     * @default {@link Traverser}\n     */\n    this._traverser = new Traverser(this);\n  }\n\n  // ------------------------------------\n  // Getters and Setters\n  // ------------------------------------\n\n  /**\n   * Returns a root node of the tree.\n   *\n   * @method rootNode\n   * @memberof Tree\n   * @instance\n   * @return {TreeNode} - root node of the tree.\n   */\n  Tree.prototype.rootNode = function () {\n    return this._rootNode;\n  };\n\n  /**\n   * Returns a current node in a tree\n   *\n   * @method currentNode\n   * @memberof Tree\n   * @instance\n   * @return {TreeNode} - current node of the tree.\n   */\n  Tree.prototype.currentNode = function () {\n    return this._currentNode;\n  };\n\n  /**\n   * Getter function that returns {@link Traverser}.\n   *\n   * @method traverser\n   * @memberof Tree\n   * @instance\n   * @return {@link Traverser} for the tree.\n   */\n  Tree.prototype.traverser = function () {\n    return this._traverser;\n  };\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Checks whether tree is empty.\n   *\n   * @method isEmpty\n   * @memberof Tree\n   * @instance\n   * @return {boolean} whether tree is empty.\n   */\n  Tree.prototype.isEmpty = function () {\n    return this._rootNode === null && this._currentNode === null;\n  };\n\n  /**\n   * Empties the tree. Removes all nodes from tree.\n   *\n   * @method pruneAllNodes\n   * @memberof Tree\n   * @instance\n   * @return {@link Tree} empty tree.\n   */\n  Tree.prototype.pruneAllNodes = function () {\n    if (this._rootNode && this._currentNode) this.trimBranchFrom(this._rootNode);\n    return this;\n  };\n\n  /**\n   * Creates a {@link TreeNode} that contains the data provided and insert it in a tree.\n   * New node gets inserted to the `_currentNode` which updates itself upon every insertion and deletion.\n   *\n   * @method insert\n   * @memberof Tree\n   * @instance\n   * @param {object} data - data that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert single value\n   * tree.insert(183);\n   *\n   * // Insert array of values\n   * tree.insert([34, 565, 78]);\n   *\n  * // Insert complex data\n   * tree.insert({\n   *   key: '#berries',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   */\n  Tree.prototype.insert = function (data) {\n    var node = new TreeNode(data);\n    if (this._rootNode === null && this._currentNode === null) {\n      node._depth = 1;\n      this._rootNode = this._currentNode = node;\n    } else {\n      node._parentNode = this._currentNode;\n      this._currentNode._childNodes.push(node);\n      this._currentNode = node;\n      node.depth = node._parentNode._depth + 1;\n    }\n    return node;\n  };\n\n  /**\n   * Removes a node from tree and updates `_currentNode` to parent node of node removed.\n   *\n   * @method remove\n   * @memberof Tree\n   * @instance\n   * @param {object} node - {@link TreeNode} that has to be removed.\n   * @param {boolean} trim - indicates whether to remove entire branch from the specified node.\n   */\n  Tree.prototype.remove = function (node, trim) {\n    if (trim || node === this._rootNode) {\n      // Trim Entire branch\n      this.trimBranchFrom(node);\n    } else {\n      // Upate children's parent to grandparent\n      node._childNodes.forEach(function (_child) {\n        _child._parentNode = node._parentNode;\n        node._parentNode._childNodes.push(_child);\n      });\n\n      // Delete itslef from parent child array\n      node._parentNode._childNodes.splice(node._parentNode._childNodes.indexOf(node), 1);\n\n      // Update Current Node\n      this._currentNode = node._parentNode;\n\n      // Clear Child Array\n      node._childNodes = [];\n      node._parentNode = null;\n      node._data = null;\n    }\n  };\n\n  /**\n   * Remove an entire branch starting with specified node.\n   *\n   * @method trimBranchFrom\n   * @memberof Tree\n   * @instance\n   * @param {object} node - {@link TreeNode} from which entire branch has to be removed.\n   */\n  Tree.prototype.trimBranchFrom = function (node) {\n    // Hold `this`\n    var thiss = this;\n\n    // trim brach recursively\n    (function recur(node) {\n      node._childNodes.forEach(recur);\n      node._childNodes = [];\n      node._data = null;\n    })(node);\n\n    // Update Current Node\n    if (node._parentNode) {\n      node._parentNode._childNodes.splice(node._parentNode._childNodes.indexOf(node), 1);\n      thiss._currentNode = node._parentNode;\n    } else {\n      thiss._rootNode = thiss._currentNode = null;\n    }\n  };\n\n  /**\n   * Inserts node to a particular node present in the tree. Particular node here is searched\n   * in the tree based on the criteria provided.\n   *\n   * @method insertTo\n   * @memberof Tree\n   * @instance\n   * @param {function} criteria - Callback function that specifies the search criteria\n   * for node to which new node is to be inserted. Criteria callback here receives {@link TreeNode#_data}\n   * in parameter and MUST return boolean indicating whether that data satisfies your criteria.\n   * @param {object} data - that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert data\n   * tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * // New Data\n   * var greenApple = {\n   *  key: '#greenapple',\n   *  value: { name: 'Green Apple', color: 'Green' }\n   * };\n   *\n   * // Insert data to node which has `key` = #apple\n   * tree.insertTo(function(data){\n   *  return data.key === '#apple'\n   * }, greenApple);\n   */\n  Tree.prototype.insertTo = function (criteria, data) {\n    var node = this.traverser().searchDFS(criteria);\n    return this.insertToNode(node, data);\n  };\n\n  /**\n   * Inserts node to a particular node present in the tree. Particular node here is an instance of {@link TreeNode}\n   *\n   * @method insertToNode\n   * @memberof Tree\n   * @instance\n   * @param {function} node -  {@link TreeNode} to which data node is to be inserted.\n   * @param {object} data - that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert data\n   * var node = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * // New Data\n   * var greenApple = {\n   *  key: '#greenapple',\n   *  value: { name: 'Green Apple', color: 'Green' }\n   * };\n   *\n   * // Insert data to node\n   * tree.insertToNode(node, greenApple);\n   */\n  Tree.prototype.insertToNode = function (node, data) {\n    var newNode = new TreeNode(data);\n    newNode._parentNode = node;\n    newNode._depth = newNode._parentNode._depth + 1;\n    node._childNodes.push(newNode);\n    this._currentNode = newNode;\n    return newNode;\n  };\n\n  /**\n   * Finds a distance between two nodes\n   *\n   * @method distanceBetween\n   * @memberof Tree\n   * @instance\n   * @param {@link TreeNode} fromNode -  Node from which distance is to be calculated\n   * @param {@link TreeNode} toNode - Node to which distance is to be calculated\n   * @return {Number} - distance(number of hops) between two nodes.\n   */\n  Tree.prototype.distanceBetween = function (fromNode, toNode) {\n    return fromNode.distanceToRoot() + toNode.distanceToRoot() - 2 * this.findCommonParent(fromNode, toNode).distanceToRoot();\n  };\n\n  /**\n   * Finds a common parent between nodes\n   *\n   * @method findCommonParent\n   * @memberof Tree\n   * @instance\n   * @param {@link TreeNode} fromNode\n   * @param {@link TreeNode} toNode\n   * @return {@link TreeNode} - common parent\n   */\n  Tree.prototype.findCommonParent = function (fromNode, toNode) {\n    // Get ancestory of both nodes\n    var fromNodeAncestors = fromNode.getAncestry();\n    var toNodeAncestors = toNode.getAncestry();\n\n    // Find Commont\n    var common = null;\n    fromNodeAncestors.some(function (ancestor) {\n      if (toNodeAncestors.indexOf(ancestor) !== -1) {\n        common = ancestor;\n        return true;\n      }\n    });\n\n    // Return Common\n    return common;\n  };\n\n  /**\n   * Exports the tree data in format specified. It maintains herirachy by adding\n   * additional \"children\" property to returned value of `criteria` callback.\n   *\n   * @method export\n   * @memberof Tree\n   * @instance\n   * @param {Tree~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be exported. A new property \"children\" is added to object returned\n   * that maintains the heirarchy of nodes.\n   * @return {object} - {@link TreeNode}.\n   * @example\n   *\n   * var rootNode = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * tree.insert({\n   *   key: '#greenapple',\n   *   value: { name: 'Green Apple', color: 'Green'}\n   * });\n   *\n   * tree.insertToNode(rootNode,  {\n   *  key: '#someanotherapple',\n   *  value: { name: 'Some Apple', color: 'Some Color' }\n   * });\n   *\n   * // Export the tree\n   * var exported = tree.export(function(data){\n   *  return { name: data.value.name };\n   * });\n   *\n   * // Result in `exported`\n   * {\n   * \"name\": \"Apple\",\n   * \"children\": [\n   *   {\n   *     \"name\": \"Green Apple\",\n   *     \"children\": []\n   *   },\n   *   {\n   *     \"name\": \"Some Apple\",\n   *     \"children\": []\n   *  }\n   * ]\n   *}\n   *\n   */\n  Tree.prototype.export = function (criteria) {\n    // Check if rootNode is not null\n    if (!this._rootNode) {\n      return null;\n    }\n    return this._rootNode.export(criteria);\n  };\n\n  /**\n   * Returns a new compressed tree. While compressing it considers nodes that\n   * satisfies given criteria and skips the rest of the nodes, making tree compressed.\n   *\n   * @method compress\n   * @memberof Tree\n   * @instance\n   * @param {Tree~criteria} criteria - Callback function that checks whether node satifies certain criteria. MUST return boolean.\n   * @return {@link Tree} - A new compressed tree.\n   */\n  Tree.prototype.compress = function (criteria) {\n    // Check if criteria is specified\n    if (!criteria || typeof criteria !== 'function') throw new Error('Compress criteria not specified');\n\n    // Check if tree is not empty\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    // Create New Tree\n    var tree = new Tree();\n\n    // Hold `this`\n    var thiss = this;\n\n    // Recur DFS\n    (function recur(node, parent) {\n      // Check-in\n      var checkIn = thiss.rootNode() === node || node.matchCriteria(criteria);\n\n      // Check if checked-in\n      if (checkIn) {\n        if (tree.isEmpty()) {\n          parent = tree.insert(node.data());\n        } else {\n          parent = tree.insertToNode(parent, node.data());\n        }\n      } else {\n        parent._data.hasCompressedNodes = true;\n      }\n\n      // For all child nodes\n      node.childNodes().forEach(function (_child) {\n        recur(_child, parent);\n      });\n    })(this.rootNode(), null);\n    return tree;\n  };\n\n  /**\n   * Imports the JSON data into a tree using the criteria provided.\n   * A property indicating the nesting of object must be specified.\n   *\n   * @method import\n   * @memberof Tree\n   * @instance\n   * @param {object} data - JSON data that has be imported\n   * @param {string} childProperty - Name of the property that holds the nested data.\n   * @param {Tree~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be imported in a tree.\n   * @return {object} - {@link Tree}.\n   * @example\n   *\n   * var data = {\n   *   \"trailId\": \"h2e67d4ea-f85f40e2ae4a06f4777864de\",\n   *   \"initiatedAt\": 1448393492488,\n   *   \"snapshots\": {\n   *      \"snapshotId\": \"b3d132131-213c20f156339ea7bdcb6273\",\n   *      \"capturedAt\": 1448393495353,\n   *      \"thumbnail\": \"data:img\",\n   *      \"children\": [\n   *       {\n   *        \"snapshotId\": \"yeb7ab27c-b36ff1b04aefafa9661243de\",\n   *        \"capturedAt\": 1448393499685,\n   *        \"thumbnail\": \"data:image/\",\n   *        \"children\": [\n   *          {\n   *            \"snapshotId\": \"a00c9828f-e2be0fc4732f56471e77947a\",\n   *            \"capturedAt\": 1448393503061,\n   *            \"thumbnail\": \"data:image/png;base64\",\n   *            \"children\": []\n   *          }\n   *        ]\n   *      }\n   *     ]\n   *   }\n   * };\n   *\n   *  // Import\n   *  // This will result in a tree having nodes containing `id` and `thumbnail` as data\n   *  tree.import(data, 'children', function(nodeData){\n   *    return {\n   *      id: nodeData.snapshotId,\n   *      thumbnail: nodeData.thumbnail\n   *     }\n   *  });\n   *\n   */\n  Tree.prototype.import = function (data, childProperty, criteria) {\n    // Empty all tree\n    if (this._rootNode) this.trimBranchFrom(this._rootNode);\n\n    // Set Current Node to root node as null\n    this._currentNode = this._rootNode = null;\n\n    // Hold `this`\n    var thiss = this;\n\n    // Import recursively\n    (function importRecur(node, recurData) {\n      // Format data from given criteria\n      var _data = criteria(recurData);\n\n      // Create Root Node\n      if (!node) {\n        node = thiss.insert(_data);\n      } else {\n        node = thiss.insertToNode(node, _data);\n      }\n\n      // For Every Child\n      recurData[childProperty].forEach(function (_child) {\n        importRecur(node, _child);\n      });\n    })(this._rootNode, data);\n\n    // Set Current Node to root node\n    this._currentNode = this._rootNode;\n    return this;\n  };\n\n  /**\n   * Callback that receives a node data in parameter and expects user to return one of following:\n   * 1. {@link Traverser#searchBFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 2. {@link Traverser#searchDFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 3. {@link Tree#export} - {object} in return indicating formatted data object.\n   * @callback criteria\n   * @param data {object} - data of particular {@link TreeNode}\n   */\n\n  // ------------------------------------\n  // Export\n  // ------------------------------------\n\n  return Tree;\n}();","map":{"version":3,"names":["TreeNode","require","Traverser","module","exports","Tree","_rootNode","_currentNode","_traverser","prototype","rootNode","currentNode","traverser","isEmpty","pruneAllNodes","trimBranchFrom","insert","data","node","_depth","_parentNode","_childNodes","push","depth","remove","trim","forEach","_child","splice","indexOf","_data","thiss","recur","insertTo","criteria","searchDFS","insertToNode","newNode","distanceBetween","fromNode","toNode","distanceToRoot","findCommonParent","fromNodeAncestors","getAncestry","toNodeAncestors","common","some","ancestor","export","compress","Error","tree","parent","checkIn","matchCriteria","hasCompressedNodes","childNodes","import","childProperty","importRecur","recurData"],"sources":["/home/ubuntu/repo/architec_of_computer_1/hanoi-react/node_modules/data-tree/src/tree.js"],"sourcesContent":["var TreeNode = require('./tree-node');\nvar Traverser = require('./traverser');\nmodule.exports = (function(){\n\n  // Flag bad practises\n  'use strict';\n\n  // ------------------------------------\n  // Basic Setup\n  // ------------------------------------\n\n  /**\n   * @class Tree\n   * @classdesc Represents the tree in which data nodes can be inserted\n   * @constructor\n   */\n   function Tree(){\n\n    /**\n     * Represents the root node of the tree.\n     *\n     * @member\n     * @type {object}\n     * @default \"null\"\n     */\n    this._rootNode = null;\n\n    /**\n     * Represents the current node in question. `_currentNode` points to most recent\n     * node inserted or parent node of most recent node removed.\n     *\n     * @member\n    * @memberof Tree.\n     * @type {object}\n     * @default \"null\"\n     */\n    this._currentNode = null;\n\n    /**\n     * Represents the traverser which search/traverse a tree in DFS and BFS fashion.\n     *\n     * @member\n     * @memberof Tree\n     * @type {object}\n     * @instance\n     * @default {@link Traverser}\n     */\n    this._traverser = new Traverser(this);\n\n  }\n\n  // ------------------------------------\n  // Getters and Setters\n  // ------------------------------------\n\n  /**\n   * Returns a root node of the tree.\n   *\n   * @method rootNode\n   * @memberof Tree\n   * @instance\n   * @return {TreeNode} - root node of the tree.\n   */\n  Tree.prototype.rootNode = function(){\n    return this._rootNode;\n  };\n\n  /**\n   * Returns a current node in a tree\n   *\n   * @method currentNode\n   * @memberof Tree\n   * @instance\n   * @return {TreeNode} - current node of the tree.\n   */\n  Tree.prototype.currentNode = function(){\n    return this._currentNode;\n  };\n\n  /**\n   * Getter function that returns {@link Traverser}.\n   *\n   * @method traverser\n   * @memberof Tree\n   * @instance\n   * @return {@link Traverser} for the tree.\n   */\n  Tree.prototype.traverser = function(){\n    return this._traverser;\n  };\n\n  // ------------------------------------\n  // Methods\n  // ------------------------------------\n\n  /**\n   * Checks whether tree is empty.\n   *\n   * @method isEmpty\n   * @memberof Tree\n   * @instance\n   * @return {boolean} whether tree is empty.\n   */\n  Tree.prototype.isEmpty = function(){\n    return this._rootNode === null && this._currentNode === null;\n  };\n\n  /**\n   * Empties the tree. Removes all nodes from tree.\n   *\n   * @method pruneAllNodes\n   * @memberof Tree\n   * @instance\n   * @return {@link Tree} empty tree.\n   */\n  Tree.prototype.pruneAllNodes = function(){\n    if(this._rootNode && this._currentNode) this.trimBranchFrom(this._rootNode);\n    return this;\n  };\n\n  /**\n   * Creates a {@link TreeNode} that contains the data provided and insert it in a tree.\n   * New node gets inserted to the `_currentNode` which updates itself upon every insertion and deletion.\n   *\n   * @method insert\n   * @memberof Tree\n   * @instance\n   * @param {object} data - data that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert single value\n   * tree.insert(183);\n   *\n   * // Insert array of values\n   * tree.insert([34, 565, 78]);\n   *\n  * // Insert complex data\n   * tree.insert({\n   *   key: '#berries',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   */\n  Tree.prototype.insert = function(data){\n    var node = new TreeNode(data);\n    if(this._rootNode === null && this._currentNode === null){\n      node._depth = 1;\n      this._rootNode = this._currentNode = node;\n    } else {\n      node._parentNode = this._currentNode;\n      this._currentNode._childNodes.push(node);\n      this._currentNode = node;\n      node.depth = node._parentNode._depth + 1;\n    }\n    return node;\n  };\n\n  /**\n   * Removes a node from tree and updates `_currentNode` to parent node of node removed.\n   *\n   * @method remove\n   * @memberof Tree\n   * @instance\n   * @param {object} node - {@link TreeNode} that has to be removed.\n   * @param {boolean} trim - indicates whether to remove entire branch from the specified node.\n   */\n  Tree.prototype.remove = function(node, trim){\n    if(trim || node === this._rootNode){\n\n      // Trim Entire branch\n      this.trimBranchFrom(node);\n\n    } else {\n\n      // Upate children's parent to grandparent\n      node._childNodes.forEach(function(_child){\n        _child._parentNode = node._parentNode;\n        node._parentNode._childNodes.push(_child);\n      });\n\n      // Delete itslef from parent child array\n      node._parentNode._childNodes.splice(node._parentNode._childNodes.indexOf(node), 1);\n\n      // Update Current Node\n      this._currentNode = node._parentNode;\n\n      // Clear Child Array\n      node._childNodes = [];\n      node._parentNode = null;\n      node._data = null;\n\n    }\n  };\n\n  /**\n   * Remove an entire branch starting with specified node.\n   *\n   * @method trimBranchFrom\n   * @memberof Tree\n   * @instance\n   * @param {object} node - {@link TreeNode} from which entire branch has to be removed.\n   */\n  Tree.prototype.trimBranchFrom = function(node){\n\n    // Hold `this`\n    var thiss = this;\n\n    // trim brach recursively\n    (function recur(node){\n      node._childNodes.forEach(recur);\n      node._childNodes = [];\n      node._data = null;\n    }(node));\n\n    // Update Current Node\n    if(node._parentNode){\n      node._parentNode._childNodes.splice(node._parentNode._childNodes.indexOf(node), 1);\n      thiss._currentNode = node._parentNode;\n    } else {\n      thiss._rootNode = thiss._currentNode = null;\n    }\n  };\n\n  /**\n   * Inserts node to a particular node present in the tree. Particular node here is searched\n   * in the tree based on the criteria provided.\n   *\n   * @method insertTo\n   * @memberof Tree\n   * @instance\n   * @param {function} criteria - Callback function that specifies the search criteria\n   * for node to which new node is to be inserted. Criteria callback here receives {@link TreeNode#_data}\n   * in parameter and MUST return boolean indicating whether that data satisfies your criteria.\n   * @param {object} data - that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert data\n   * tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * // New Data\n   * var greenApple = {\n   *  key: '#greenapple',\n   *  value: { name: 'Green Apple', color: 'Green' }\n   * };\n   *\n   * // Insert data to node which has `key` = #apple\n   * tree.insertTo(function(data){\n   *  return data.key === '#apple'\n   * }, greenApple);\n   */\n  Tree.prototype.insertTo = function(criteria, data){\n    var node = this.traverser().searchDFS(criteria);\n    return this.insertToNode(node, data);\n  };\n\n  /**\n   * Inserts node to a particular node present in the tree. Particular node here is an instance of {@link TreeNode}\n   *\n   * @method insertToNode\n   * @memberof Tree\n   * @instance\n   * @param {function} node -  {@link TreeNode} to which data node is to be inserted.\n   * @param {object} data - that has to be stored in tree-node.\n   * @return {object} - instance of {@link TreeNode} that represents node inserted.\n   * @example\n   *\n   * // Insert data\n   * var node = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * // New Data\n   * var greenApple = {\n   *  key: '#greenapple',\n   *  value: { name: 'Green Apple', color: 'Green' }\n   * };\n   *\n   * // Insert data to node\n   * tree.insertToNode(node, greenApple);\n   */\n  Tree.prototype.insertToNode = function(node, data){\n    var newNode = new TreeNode(data);\n    newNode._parentNode = node;\n    newNode._depth = newNode._parentNode._depth + 1;\n    node._childNodes.push(newNode);\n    this._currentNode = newNode;\n    return newNode;\n  };\n\n  /**\n   * Finds a distance between two nodes\n   *\n   * @method distanceBetween\n   * @memberof Tree\n   * @instance\n   * @param {@link TreeNode} fromNode -  Node from which distance is to be calculated\n   * @param {@link TreeNode} toNode - Node to which distance is to be calculated\n   * @return {Number} - distance(number of hops) between two nodes.\n   */\n  Tree.prototype.distanceBetween = function(fromNode, toNode){\n    return fromNode.distanceToRoot() + toNode.distanceToRoot() - 2 *  this.findCommonParent(fromNode, toNode).distanceToRoot();\n  };\n\n  /**\n   * Finds a common parent between nodes\n   *\n   * @method findCommonParent\n   * @memberof Tree\n   * @instance\n   * @param {@link TreeNode} fromNode\n   * @param {@link TreeNode} toNode\n   * @return {@link TreeNode} - common parent\n   */\n  Tree.prototype.findCommonParent = function(fromNode, toNode){\n\n    // Get ancestory of both nodes\n    var fromNodeAncestors = fromNode.getAncestry();\n    var toNodeAncestors = toNode.getAncestry();\n\n    // Find Commont\n    var common = null;\n    fromNodeAncestors.some(function(ancestor){\n      if(toNodeAncestors.indexOf(ancestor) !== -1){\n        common = ancestor;\n        return true;\n      }\n    });\n\n    // Return Common\n    return common;\n\n  };\n\n  /**\n   * Exports the tree data in format specified. It maintains herirachy by adding\n   * additional \"children\" property to returned value of `criteria` callback.\n   *\n   * @method export\n   * @memberof Tree\n   * @instance\n   * @param {Tree~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be exported. A new property \"children\" is added to object returned\n   * that maintains the heirarchy of nodes.\n   * @return {object} - {@link TreeNode}.\n   * @example\n   *\n   * var rootNode = tree.insert({\n   *   key: '#apple',\n   *   value: { name: 'Apple', color: 'Red'}\n   * });\n   *\n   * tree.insert({\n   *   key: '#greenapple',\n   *   value: { name: 'Green Apple', color: 'Green'}\n   * });\n   *\n   * tree.insertToNode(rootNode,  {\n   *  key: '#someanotherapple',\n   *  value: { name: 'Some Apple', color: 'Some Color' }\n   * });\n   *\n   * // Export the tree\n   * var exported = tree.export(function(data){\n   *  return { name: data.value.name };\n   * });\n   *\n   * // Result in `exported`\n   * {\n   * \"name\": \"Apple\",\n   * \"children\": [\n   *   {\n   *     \"name\": \"Green Apple\",\n   *     \"children\": []\n   *   },\n   *   {\n   *     \"name\": \"Some Apple\",\n   *     \"children\": []\n   *  }\n   * ]\n   *}\n   *\n   */\n  Tree.prototype.export = function(criteria){\n\n    // Check if rootNode is not null\n    if(!this._rootNode){\n      return null;\n    }\n\n    return this._rootNode.export(criteria);\n  };\n\n  /**\n   * Returns a new compressed tree. While compressing it considers nodes that\n   * satisfies given criteria and skips the rest of the nodes, making tree compressed.\n   *\n   * @method compress\n   * @memberof Tree\n   * @instance\n   * @param {Tree~criteria} criteria - Callback function that checks whether node satifies certain criteria. MUST return boolean.\n   * @return {@link Tree} - A new compressed tree.\n   */\n  Tree.prototype.compress = function(criteria){\n\n    // Check if criteria is specified\n    if(!criteria || typeof criteria !== 'function')\n      throw new Error('Compress criteria not specified');\n\n    // Check if tree is not empty\n    if(this.isEmpty()){\n      return null;\n    }\n\n    // Create New Tree\n    var tree = new Tree();\n\n    // Hold `this`\n    var thiss = this;\n\n    // Recur DFS\n    (function recur(node, parent){\n\n      // Check-in\n      var checkIn = thiss.rootNode() === node || node.matchCriteria(criteria);\n\n      // Check if checked-in\n      if(checkIn){\n        if(tree.isEmpty()){\n          parent = tree.insert(node.data());\n        } else {\n          parent = tree.insertToNode(parent, node.data());\n        }\n      } else {\n        parent._data.hasCompressedNodes = true;\n      }\n\n      // For all child nodes\n      node.childNodes().forEach(function(_child){\n        recur(_child, parent);\n      });\n\n    }(this.rootNode(), null));\n\n    return tree;\n\n  };\n\n  /**\n   * Imports the JSON data into a tree using the criteria provided.\n   * A property indicating the nesting of object must be specified.\n   *\n   * @method import\n   * @memberof Tree\n   * @instance\n   * @param {object} data - JSON data that has be imported\n   * @param {string} childProperty - Name of the property that holds the nested data.\n   * @param {Tree~criteria} criteria - Callback function that receives data in parameter\n   * and MUST return a formatted data that has to be imported in a tree.\n   * @return {object} - {@link Tree}.\n   * @example\n   *\n   * var data = {\n   *   \"trailId\": \"h2e67d4ea-f85f40e2ae4a06f4777864de\",\n   *   \"initiatedAt\": 1448393492488,\n   *   \"snapshots\": {\n   *      \"snapshotId\": \"b3d132131-213c20f156339ea7bdcb6273\",\n   *      \"capturedAt\": 1448393495353,\n   *      \"thumbnail\": \"data:img\",\n   *      \"children\": [\n   *       {\n   *        \"snapshotId\": \"yeb7ab27c-b36ff1b04aefafa9661243de\",\n   *        \"capturedAt\": 1448393499685,\n   *        \"thumbnail\": \"data:image/\",\n   *        \"children\": [\n   *          {\n   *            \"snapshotId\": \"a00c9828f-e2be0fc4732f56471e77947a\",\n   *            \"capturedAt\": 1448393503061,\n   *            \"thumbnail\": \"data:image/png;base64\",\n   *            \"children\": []\n   *          }\n   *        ]\n   *      }\n   *     ]\n   *   }\n   * };\n   *\n   *  // Import\n   *  // This will result in a tree having nodes containing `id` and `thumbnail` as data\n   *  tree.import(data, 'children', function(nodeData){\n   *    return {\n   *      id: nodeData.snapshotId,\n   *      thumbnail: nodeData.thumbnail\n   *     }\n   *  });\n   *\n   */\n  Tree.prototype.import = function(data, childProperty, criteria){\n\n    // Empty all tree\n    if(this._rootNode) this.trimBranchFrom(this._rootNode);\n\n    // Set Current Node to root node as null\n    this._currentNode = this._rootNode = null;\n\n    // Hold `this`\n    var thiss = this;\n\n    // Import recursively\n    (function importRecur(node, recurData){\n\n      // Format data from given criteria\n      var _data = criteria(recurData);\n\n      // Create Root Node\n      if(!node){\n        node = thiss.insert(_data);\n      } else {\n        node = thiss.insertToNode(node, _data);\n      }\n\n      // For Every Child\n      recurData[childProperty].forEach(function(_child){\n        importRecur(node, _child);\n      });\n\n    }(this._rootNode, data));\n\n    // Set Current Node to root node\n    this._currentNode = this._rootNode;\n\n    return this;\n\n  };\n\n  /**\n   * Callback that receives a node data in parameter and expects user to return one of following:\n   * 1. {@link Traverser#searchBFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 2. {@link Traverser#searchDFS} - {boolean} in return indicating whether given node satisfies criteria.\n   * 3. {@link Tree#export} - {object} in return indicating formatted data object.\n   * @callback criteria\n   * @param data {object} - data of particular {@link TreeNode}\n   */\n\n   // ------------------------------------\n   // Export\n   // ------------------------------------\n\n  return Tree;\n\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}